import sqlite3

conn = sqlite3.connect(":memory:")  
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS artists (
    ArtistId INTEGER PRIMARY KEY AUTOINCREMENT,
    Name NVARCHAR(100) UNIQUE
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS albums (
    AlbumId INTEGER PRIMARY KEY AUTOINCREMENT,
    Title NVARCHAR(200),
    ArtistId INTEGER,
    FOREIGN KEY (ArtistId) REFERENCES artists(ArtistId)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS songs (
    SongId INTEGER PRIMARY KEY AUTOINCREMENT,
    Title NVARCHAR(200),
    ArtistId INTEGER,
    AlbumId INTEGER,
    FOREIGN KEY (ArtistId) REFERENCES artists(ArtistId),
    FOREIGN KEY (AlbumId) REFERENCES albums(AlbumId)
)
""")

cursor.executemany("""
INSERT OR IGNORE INTO artists (Name) VALUES (?)
""", [
    ("Novulent",),
    ("Nathaniel Constantin",),
    ("SZA",),
    ("Maroon 5",)
])

cursor.executemany("""
INSERT OR IGNORE INTO albums (Title, ArtistId) 
VALUES (?, (SELECT ArtistId FROM artists WHERE Name = ?))
""", [
    ("scars", "Novulent"),
    ("Why Can't I", "Nathaniel Constantin"),
    ("SOS", "SZA"),
    ("It Won't Be Soon Before Long (International Version)", "Maroon 5")
])

cursor.executemany("""
INSERT OR IGNORE INTO songs (Title, ArtistId, AlbumId) 
VALUES (
    ?, 
    (SELECT ArtistId FROM artists WHERE Name = ?), 
    (SELECT AlbumId FROM albums WHERE Title = ?)
)
""", [
    ("scars", "Novulent", "scars"),
    ("Why Can't I", "Nathaniel Constantin", "Why Can't I"),
    ("Kill Bill", "SZA", "SOS"),
    ("Won't Go Home Without You", "Maroon 5", "It Won't Be Soon Before Long (International Version)")
])

conn.commit()

def search_database():
    while True:
        choice = input("\nDo you want to search by (1) Album or (2) Song? (Type 'exit' to quit): ").strip().lower()
        
        if choice == "exit":
            print("\n Exiting program. Goodbye!")
            break
        
        if choice == "1":
            album_name = input("\nEnter album name: ").strip()
            
            cursor.execute("""
            SELECT songs.Title, artists.Name 
            FROM songs
            JOIN artists ON songs.ArtistId = artists.ArtistId
            JOIN albums ON songs.AlbumId = albums.AlbumId
            WHERE albums.Title = ?
            """, (album_name,))
            
            songs = cursor.fetchall()

            if songs:
                print(f"\n Songs from the album '{album_name}':")
                for song in songs:
                    print(f"- {song[0]} by {song[1]}")
            else:
                print(f"\n No songs found for album '{album_name}'. Please try again.")

        elif choice == "2":
            song_name = input("\nEnter song name: ").strip()
            
            cursor.execute("""
            SELECT songs.Title, artists.Name, albums.Title 
            FROM songs
            JOIN artists ON songs.ArtistId = artists.ArtistId
            JOIN albums ON songs.AlbumId = albums.AlbumId
            WHERE songs.Title = ?
            """, (song_name,))
            
            song = cursor.fetchone()

            if song:
                print(f"\n Song Found: '{song[0]}' by {song[1]} from the album '{song[2]}'")
            else:
                print(f"\n No song found with the name '{song_name}'. Please try again.")

        else:
            print("\n Invalid choice. Please enter 1 for Album or 2 for Song.")

search_database()

conn.close()

print("\n=== Customer Names ===")
    names = []
    for rec in customers_collection.find({}, {"_id": 0, "LastName": 1, "FirstName": 1}):
        names.append([rec["FirstName"], rec["LastName"]])
    print(tabulate(names, headers=["First Name", "Last Name"], tablefmt='grid'))
    
    print("\n=== Customers with LastName starting with 'G' ===")
    rgx = re.compile('^G.*?$', re.IGNORECASE)
    cursor = customers_collection.find({"LastName": rgx})
    
    g_customers = []
    headers = None
    num_docs = 0
    for document in cursor:
        num_docs += 1
        formatted_doc = format_customer_data(document)
        if not headers:
            headers = formatted_doc.keys()
        g_customers.append(formatted_doc.values())
    
    print(tabulate(g_customers, headers=headers, tablefmt='grid'))
    print(f"\nTotal customers with last name starting with 'G': {num_docs}")
    
    client.close()

if __name__ == '__main__':
    main()

