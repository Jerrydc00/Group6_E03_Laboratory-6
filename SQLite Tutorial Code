import sqlite3

# Use an in-memory database for online compilers
conn = sqlite3.connect(":memory:")  
cursor = conn.cursor()

# Create Artists table
cursor.execute("""
CREATE TABLE IF NOT EXISTS artists (
    ArtistId INTEGER PRIMARY KEY AUTOINCREMENT,
    Name NVARCHAR(100) UNIQUE
)
""")

# Create Albums table
cursor.execute("""
CREATE TABLE IF NOT EXISTS albums (
    AlbumId INTEGER PRIMARY KEY AUTOINCREMENT,
    Title NVARCHAR(200),
    ArtistId INTEGER,
    FOREIGN KEY (ArtistId) REFERENCES artists(ArtistId)
)
""")

# Create Songs table
cursor.execute("""
CREATE TABLE IF NOT EXISTS songs (
    SongId INTEGER PRIMARY KEY AUTOINCREMENT,
    Title NVARCHAR(200),
    ArtistId INTEGER,
    AlbumId INTEGER,
    FOREIGN KEY (ArtistId) REFERENCES artists(ArtistId),
    FOREIGN KEY (AlbumId) REFERENCES albums(AlbumId)
)
""")

# Insert Artists
cursor.executemany("""
INSERT OR IGNORE INTO artists (Name) VALUES (?)
""", [
    ("Novulent",),
    ("Nathaniel Constantin",),
    ("SZA",),
    ("Maroon 5",)
])

# Insert Albums
cursor.executemany("""
INSERT OR IGNORE INTO albums (Title, ArtistId) 
VALUES (?, (SELECT ArtistId FROM artists WHERE Name = ?))
""", [
    ("scars", "Novulent"),
    ("Why Can't I", "Nathaniel Constantin"),
    ("SOS", "SZA"),
    ("It Won't Be Soon Before Long (International Version)", "Maroon 5")
])

# Insert Songs
cursor.executemany("""
INSERT OR IGNORE INTO songs (Title, ArtistId, AlbumId) 
VALUES (
    ?, 
    (SELECT ArtistId FROM artists WHERE Name = ?), 
    (SELECT AlbumId FROM albums WHERE Title = ?)
)
""", [
    ("scars", "Novulent", "scars"),
    ("Why Can't I", "Nathaniel Constantin", "Why Can't I"),
    ("Kill Bill", "SZA", "SOS"),
    ("Won't Go Home Without You", "Maroon 5", "It Won't Be Soon Before Long (International Version)")
])

# Commit changes
conn.commit()

# Function to search for albums or songs
def search_database():
    while True:
        choice = input("\nDo you want to search by (1) Album or (2) Song? (Type 'exit' to quit): ").strip().lower()
        
        if choice == "exit":
            print("\nüéµ Exiting program. Goodbye!")
            break
        
        if choice == "1":
            album_name = input("\nEnter album name: ").strip()
            
            cursor.execute("""
            SELECT songs.Title, artists.Name 
            FROM songs
            JOIN artists ON songs.ArtistId = artists.ArtistId
            JOIN albums ON songs.AlbumId = albums.AlbumId
            WHERE albums.Title = ?
            """, (album_name,))
            
            songs = cursor.fetchall()

            if songs:
                print(f"\nüéµ Songs from the album '{album_name}':")
                for song in songs:
                    print(f"- {song[0]} by {song[1]}")
            else:
                print(f"\n‚ùå No songs found for album '{album_name}'. Please try again.")

        elif choice == "2":
            song_name = input("\nEnter song name: ").strip()
            
            cursor.execute("""
            SELECT songs.Title, artists.Name, albums.Title 
            FROM songs
            JOIN artists ON songs.ArtistId = artists.ArtistId
            JOIN albums ON songs.AlbumId = albums.AlbumId
            WHERE songs.Title = ?
            """, (song_name,))
            
            song = cursor.fetchone()

            if song:
                print(f"\nüéµ Song Found: '{song[0]}' by {song[1]} from the album '{song[2]}'")
            else:
                print(f"\n‚ùå No song found with the name '{song_name}'. Please try again.")

        else:
            print("\n‚ùå Invalid choice. Please enter 1 for Album or 2 for Song.")

# Start the search loop
search_database()

# Close connection
conn.close()
